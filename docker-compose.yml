version: '3.8'

services:
  # Frontend - React Dashboard
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    image: cyber-trust-dashboard:latest
    restart: unless-stopped
    depends_on:
      - api
      - redis
    networks:
      - frontend-network
      - backend-network
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Service (Placeholder for future implementation)
  api:
    image: node:20-alpine
    command: sh -c "echo 'API service placeholder' > /app/index.html && npx http-server /app -p 3000"
    restart: unless-stopped
    volumes:
      - api-data:/app/data
    networks:
      - backend-network
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-trustdb}
      - DB_USER=${POSTGRES_USER:-trustuser}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-trustpassword}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-changeme_in_production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./postgres/backups:/backups
    networks:
      - backend-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trustdb}
      - POSTGRES_USER=${POSTGRES_USER:-trustuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trustpassword}
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-trustuser} -d ${POSTGRES_DB:-trustdb}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword} --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispassword}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - nginx-cache:/var/cache/nginx
    depends_on:
      - frontend
      - api
    networks:
      - frontend-network
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=${NGINX_PORT:-80}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Backup Service
  backup:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - ./postgres/backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - backend-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trustdb}
      - POSTGRES_USER=${POSTGRES_USER:-trustuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-trustpassword}
      - POSTGRES_HOST=postgres
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "chmod +x /backup.sh && 
       echo '0 2 * * * /backup.sh' > /etc/crontabs/root && 
       crond -f -d 8"
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - monitoring-network
      - backend-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring-network
      - frontend-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
    driver_opts:
      com.docker.network.bridge.name: frontend-net
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
  
  backend-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.1.0/24
    driver_opts:
      com.docker.network.bridge.name: backend-net
      com.docker.network.bridge.enable_icc: "true"
  
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24
    driver_opts:
      com.docker.network.bridge.name: monitoring-net
      com.docker.network.bridge.enable_icc: "true"

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-/opt/cyber-trust-dashboard}/postgres-data
      o: bind
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-/opt/cyber-trust-dashboard}/redis-data
      o: bind
  
  api-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-/opt/cyber-trust-dashboard}/api-data
      o: bind
  
  nginx-cache:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-/opt/cyber-trust-dashboard}/nginx-cache
      o: bind
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-/opt/cyber-trust-dashboard}/prometheus-data
      o: bind
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH:-/opt/cyber-trust-dashboard}/grafana-data
      o: bind
